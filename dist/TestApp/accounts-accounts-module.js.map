{"version":3,"sources":["./src/app/invoicer/accounts/accounts-routing.module.ts","./src/app/invoicer/accounts/accounts.module.ts","./src/app/invoicer/accounts/components/account-entry/account-entry.component.ts","./src/app/invoicer/accounts/components/account-entry/account-entry.component.html","./src/app/invoicer/accounts/components/account/account.component.ts","./src/app/invoicer/accounts/components/account/account.component.html","./src/app/lib/formLabelMessage.ts","./src/app/services/account.service.ts"],"names":[],"mappings":"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","file":"accounts-accounts-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AccountComponent}  from './components/account/account.component';\n\nconst routes: Routes = [\n  { path: '', component:AccountComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AccountsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport  { AgGridModule } from \"ag-grid-angular\"\nimport { AccountsRoutingModule } from './accounts-routing.module';\nimport { AccountComponent } from './components/account/account.component';\nimport { AccountEntryComponent } from './components/account-entry/account-entry.component';\n\n\n\n@NgModule({\n  declarations: [AccountComponent, AccountEntryComponent],\n  imports: [\n    CommonModule,\n    AccountsRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AgGridModule.withComponents([])\n  ]\n})\nexport class AccountsModule { }\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms'\nimport { formLabel,formMessage } from \"../../../../lib/formLabelMessage\";\nimport {IAccount} from \"../../../../Entities/account\"\n@Component({\n  selector: 'app-account-entry',\n  templateUrl: './account-entry.component.html',\n  styleUrls: ['./account-entry.component.css']\n})\nexport class AccountEntryComponent implements OnInit {\n\n  @Input() account:IAccount;\n  @Output() onFormSubmit:EventEmitter<IAccount> = new EventEmitter<IAccount>();\n  accountForm:FormGroup;\n  formLabel =  formLabel.account;\n  formMessage = formMessage.account;\n\n  constructor(private fb:FormBuilder) { }\n\n  ngOnInit(): void {\n    this.accountForm = this.fb.group({\n      accountName:['',Validators.required],\n      accountAddress:['',Validators.required],\n      panNumber:['',Validators.required],\n      isGSTRegistered:[false],\n      gstNumber:[''],\n      bankAccountNumber:['',Validators.required],\n      bankName:['',Validators.required],\n      bankBranch:['',Validators.required],\n      ifscCode:['',Validators.required]\n    });\n    this.accountForm.get(\"isGSTRegistered\").valueChanges.subscribe((value)=>{\n      if(value){\n        this.accountForm.get(\"gstNumber\").setValidators(Validators.required)\n      }else{\n        this.accountForm.get(\"gstNumber\").clearValidators();\n        this.accountForm.get(\"gstNumber\").setValue(null);\n      }\n      this.accountForm.get(\"gstNumber\").updateValueAndValidity();\n    });\n  }\n\n  onAccountFormSubmit():void{\n    this.onFormSubmit.emit(this.account);\n    this.accountForm.reset();\n  }\n\n}\n","<div *ngIf=\"account\">\n    <form class=\"row g-3\" [formGroup]=\"accountForm\" (ngSubmit)=\"onAccountFormSubmit()\">\n        <div class=\"col-md-12\">\n            <div class=\"form-floating\">\n                <input type=\"text\" \n                        class=\"form-control form-control-sm\" \n                        id=\"accountName\"\n                        placeholder=\"Please enter account name\" \n                        formControlName=\"accountName\"\n                        [(ngModel)]=\"account.accountName\"\n                        [ngClass]=\"accountForm.get('accountName').invalid && \n                        (accountForm.get('accountName').dirty || accountForm.get('accountName').touched)?'is-invalid':''\">\n                <label for=\"accountName\">{{formLabel.ACCOUNT_NAME}}</label>\n                <div class=\"invalid-feedback\" \n                     *ngIf=\"accountForm.get('accountName').errors && \n                accountForm.get('accountName').hasError('required')\">{{formMessage.ACCOUNT_NAME_REQUIRED}}</div>\n            </div>\n        </div>\n        <div class=\"col-md-12\">\n            <div class=\"form-floating\">\n                <textarea\n                        class=\"form-control form-control-sm\" \n                        id=\"accountAddress\"\n                        placeholder=\"Please enter account address\" \n                        formControlName=\"accountAddress\" \n                        [(ngModel)]=\"account.accountAddress\" \n                        [ngClass]=\"accountForm.get('accountAddress').invalid && \n                        (accountForm.get('accountAddress').dirty || accountForm.get('accountAddress').touched)?'is-invalid':''\"></textarea>\n                <label for=\"accountAddress\">{{formLabel.ACCOUNT_ADDRESS}}</label>\n                <div class=\"invalid-feedback\" \n                     *ngIf=\"accountForm.get('accountAddress').errors && \n                accountForm.get('accountAddress').hasError('required')\">{{formMessage.ACCOUNT_ADDRESS_REQUIRED}}</div>\n            </div>\n        </div>\n        <div class=\"col-md-12\">\n            <div class=\"form-floating\">\n                <input type=\"text\" \n                        class=\"form-control form-control-sm\" \n                        id=\"panNumber\"\n                        placeholder=\"Please enter pan name\" \n                        formControlName=\"panNumber\" \n                        [(ngModel)]=\"account.panNumber\" \n                        [ngClass]=\"accountForm.get('panNumber').invalid && \n                        (accountForm.get('panNumber').dirty || accountForm.get('panNumber').touched)?'is-invalid':''\">\n                <label for=\"panNumber\">{{formLabel.PAN}}</label>\n                <div class=\"invalid-feedback\" \n                     *ngIf=\"accountForm.get('panNumber').errors && \n                accountForm.get('panNumber').hasError('required')\">{{formMessage.ACCOUNT_PAN_REQUIRED}}</div>\n            </div>\n        </div>\n        <div class=\"col-md-12\">\n            <div class=\"form-check\">\n                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"chkGSTRegistration\"\n                [(ngModel)]=\"account.isGSTRegistered\"\n                    formControlName=\"isGSTRegistered\">\n                <label class=\"form-check-label\" for=\"chkGSTRegistration\">\n                    {{formLabel.GST_REGISTERED}}\n                </label>\n            </div>\n        </div>\n        <div class=\"col-md-12\" *ngIf=\"accountForm.value.isGSTRegistered\">\n            <div class=\"form-floating\">\n                <input type=\"text\" class=\"form-control form-control-sm\" id=\"accountGSTNumber\"\n                    placeholder=\"Please enter GST Number\" formControlName=\"gstNumber\"\n                [(ngModel)]=\"account.gstNumber\">\n                <label for=\"accountGSTNumber\">{{formLabel.GST_MUMBER}}</label>\n            </div>\n        </div>\n        <div class=\"col-md-12\">\n            <div class=\"form-floating\">\n                <input type=\"text\" \n                        class=\"form-control form-control-sm\" \n                        id=\"bankAccountNumber\"\n                        placeholder=\"Please enter bank account number\" \n                        formControlName=\"bankAccountNumber\" \n                        [(ngModel)]=\"account.bankAccountNumber\"\n                        [ngClass]=\"accountForm.get('bankAccountNumber').invalid && \n                        (accountForm.get('bankAccountNumber').dirty || accountForm.get('bankAccountNumber').touched)?'is-invalid':''\">\n                <label for=\"bankAccountNumber\">{{formLabel.BANK_ACCOUNT_NUMBER}}</label>\n                <div class=\"invalid-feedback\" \n                     *ngIf=\"accountForm.get('bankAccountNumber').errors && \n                accountForm.get('bankAccountNumber').hasError('required')\">{{formMessage.BANK_ACCOUNT_NUMBER_REQUIRED}}</div>\n            </div>\n        </div>\n        <div class=\"col-md-12\">\n            <div class=\"row\">\n                <div class=\"col-md-6 form-floating\">\n                    <input type=\"text\" \n                            class=\"form-control form-control-sm\" \n                            id=\"bankName\"\n                            placeholder=\"Please enter bank name\" \n                            formControlName=\"bankName\" \n                            [(ngModel)]=\"account.bankName\"\n                            [ngClass]=\"accountForm.get('bankName').invalid && \n                            (accountForm.get('bankName').dirty || accountForm.get('bankName').touched)?'is-invalid':''\">\n                    <label for=\"bankName\">{{formLabel.BANK_NAME}}</label>\n                    <div class=\"invalid-feedback\" \n                         *ngIf=\"accountForm.get('bankName').errors && \n                    accountForm.get('bankName').hasError('required')\">{{formMessage.BANK_NAME_REQUIRED}}</div>\n                </div>\n                <div class=\"col-md-6 form-floating\">\n                    <input type=\"text\" \n                            class=\"form-control form-control-sm\" \n                            id=\"bankBranch\"\n                            placeholder=\"Please enter bank branch\" \n                            formControlName=\"bankBranch\" \n                            [(ngModel)]=\"account.bankBranch\"\n                            [ngClass]=\"accountForm.get('bankBranch').invalid && \n                            (accountForm.get('bankBranch').dirty || accountForm.get('bankBranch').touched)?'is-invalid':''\">\n                    <label for=\"bankBranch\">{{formLabel.BANK_BRANCH}}</label>\n                    <div class=\"invalid-feedback\" \n                         *ngIf=\"accountForm.get('bankBranch').errors && \n                    accountForm.get('bankBranch').hasError('required')\">{{formMessage.BANK_BRANCH_REQUIRED}}</div>\n                </div>\n            </div>\n            \n        </div>\n        <div class=\"col-md-12\">\n            <div class=\"form-floating\">\n                <input type=\"text\" \n                        class=\"form-control form-control-sm\" \n                        id=\"ifscCode\"\n                        placeholder=\"Please enter IFSC Code\" \n                        formControlName=\"ifscCode\" \n                        [(ngModel)]=\"account.ifscCode\"\n                        [ngClass]=\"accountForm.get('ifscCode').invalid && \n                        (accountForm.get('ifscCode').dirty || accountForm.get('ifscCode').touched)?'is-invalid':''\">\n                <label for=\"accountName\">{{formLabel.IFSC_CODE}}</label>\n                <div class=\"invalid-feedback\" \n                     *ngIf=\"accountForm.get('ifscCode').errors && \n                accountForm.get('ifscCode').hasError('required')\">{{formMessage.IFSC_CODE_REQUIRED}}</div>\n            </div>\n        </div>\n        <div class=\"col-md-12\">\n            <button class=\"btn btn-primary\" type=\"submit\" [class.disabled]=\"accountForm.invalid\">Save</button>\n        </div>\n    </form>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { IAccount } from 'src/app/Entities/account';\nimport { AccountService } from '../../../../services/account.service';\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css']\n})\nexport class AccountComponent implements OnInit {\n\n  account: IAccount;\n  accounts: IAccount[];\n  columnDefs = [\n    { field: \"id\", width: 10, hide: true },\n    { field: \"accountName\", width: 200, headerName: 'Account Name', sortable: true },\n    { field: \"accountAddress\", width: 200, headerName: 'Address', sortable: true },\n    { field: \"panNumber\", width: 200, headerName: 'Pan', headerClass: 'client_grid_column_align-right' },\n    { field: \"gstNumber\", width: 200, headerName: \"GST No.\"}]\n  gridApi: any;\n  gridColumnApi: any;\n  constructor(private accountService: AccountService) {\n    //** Initalized account with default Value */\n    this.account = this.getAccountDefault();\n  }\n\n  ngOnInit(): void {\n    this.accounts = this.accountService.getAccounts()\n  }\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n  }\n  onSelectionChanged(event: any) {\n    var selectedRows = this.gridApi.getSelectedRows();\n    let data = selectedRows[0];\n    this.account = data;\n  }\n  getAccountDefault(): IAccount {\n    return {\n      id: -1,\n      accountName: \"\",\n      accountAddress: \"\",\n      panNumber: \"\",\n      isGSTRegistered: false,\n      gstNumber: null,\n      bankAccountNumber: \"\",\n      bankBranch: \"\",\n      bankName: \"\",\n      ifscCode: \"\"\n    }\n  }\n  onAccountFormSubmit(value: IAccount) {\n    let account = {...value};\n    this.accounts = this.accountService.saveAccount(account);\n    this.account = this.getAccountDefault();\n    this.gridApi.setRowData(this.accounts);\n  }\n}\n","<div class=\"container mt-2\">\n    <h4>Manage Accounts</h4>\n    <hr />\n    <div class=\"row\">\n        <div class=\"col-md-4\">\n            <app-account-entry [account]=\"account\" (onFormSubmit)=\"onAccountFormSubmit($event);\"></app-account-entry>\n        </div>\n        <div class=\"col-md-8\">\n            <ag-grid-angular style=\"height: 100vh; width: 90%;\" class=\"ag-theme-material\" [rowData]=\"accounts\"\n            [columnDefs]=\"columnDefs\"\n            [rowSelection]=\"'single'\"\n            (gridReady)=\"onGridReady($event)\"\n            (selectionChanged)=\"onSelectionChanged($event)\">\n            </ag-grid-angular>\n        </div>\n    </div>\n</div>","const formLabel = {\n    \"account\":{\n        \"ACCOUNT_NAME\":\"Account Name\",\n        \"ACCOUNT_ADDRESS\":\"Account Address\",\n        \"PAN\":\"PAN\",\n        \"GST_REGISTERED\":\"GST Registered\",\n        \"GST_NUMBER\":\"GST No.\",\n        \"BANK_ACCOUNT_NUMBER\":\"Account Number\",\n        \"BANK_NAME\":\"Bank Name\",\n        \"BANK_BRANCH\":\"Bank Branch\",\n        \"IFSC_CODE\":\"IFSC Code\"\n    },\n    \"common\":{\n        \"SAVE\":\"SAVE\"\n    }\n}\nconst formMessage = {\n    \"account\":{\n        \"ACCOUNT_NAME_REQUIRED\":\"Please entere account name\",\n        \"ACCOUNT_ADDRESS_REQUIRED\":\"Please enter account address\",\n        \"ACCOUNT_PAN_REQUIRED\":\"Please enter Pan detail\",\n        \"GST_NUMBER_REQUIRED\":\"Please enter GST Number\",\n        \"BANK_NAME_REQUIRED\":\"Please enter bank name\",\n        \"BANK_BRANCH_REQUIRED\":\"Please enter bank branch\",\n        \"BANK_ACCOUNT_NUMBER_REQUIRED\":\"Please enter account number\",\n        \"IFSC_CODE_REQUIRED\":\"Please eneter IFSC code\"\n    }\n}\nexport {formLabel,formMessage};","import { Injectable } from '@angular/core';\nimport { IAccount } from '../Entities/account';\nimport { findNextIdentity } from '../lib/Utility';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  accounts: IAccount[] = [];\n  accountKey: string = \"accounts\"\n  constructor() {\n    let accountCollection:string = localStorage.getItem(this.accountKey);\n    if (accountCollection != null) {\n      this.accounts = <IAccount[]>JSON.parse(accountCollection);\n    }\n  }\n  public getAccounts(): IAccount[] {\n    let data:string= localStorage.getItem(this.accountKey);\n    if (data !== null) {\n        this.accounts = <IAccount[]>JSON.parse(data);\n    }\n    return this.accounts;\n  }\n  public saveAccount(account: IAccount): IAccount[] {\n    if (account.id == -1 || account.id == null) {\n      let id = findNextIdentity(\"id\", this.accounts);\n      account.id = id;\n      this.accounts.push(account);\n\n    } else {\n      let clientIndex: number = this.accounts.findIndex((item) => {\n        return item.id == account.id;\n      });\n      let preValue: IAccount = this.accounts[clientIndex];\n      preValue.accountName = account.accountName;\n      preValue.accountAddress = account.accountAddress;\n      preValue.panNumber = account.panNumber;\n      preValue.isGSTRegistered = account.isGSTRegistered;\n      preValue.gstNumber = account.gstNumber;\n      preValue.bankAccountNumber = account.bankAccountNumber;\n      preValue.bankName = account.bankName;\n      preValue.bankBranch = account.bankBranch;\n      preValue.ifscCode = account.ifscCode;\n      this.accounts[clientIndex] = preValue;\n    }\n    localStorage.setItem(this.accountKey, JSON.stringify(this.accounts));\n    return this.accounts;\n\n  }\n  public deletAccount(account: IAccount): IAccount[] {\n    this.accounts = this.accounts.filter((item: IAccount) => { return item.id !== account.id });\n    localStorage.setItem(this.accountKey, JSON.stringify(this.accounts));\n    return this.accounts;\n  }\n  public findAccountById(id:number):IAccount|null{\n    let account:IAccount = null;\n    if(!isNaN(id)){\n      let searchValue = this.getAccounts().filter((item:IAccount)=>{return item.id == id});\n      if(searchValue && searchValue.length >0) account = searchValue[0];\n    }\n    return account;\n  }\n}\n"],"sourceRoot":"webpack:///"}